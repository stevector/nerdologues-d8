<?php

/**
 * @file
 * Contains nerdcustom.module..
 */

use \Drupal\node\NodeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Field\FieldItemListInterface;

/**
 * Implements hook_node_links_alter().
 */
function nerdcustom_node_links_alter(array &$links, NodeInterface $entity, array &$context) {

  if ($entity->bundle() === 'person') {
    $links['node']['#links']['node-readmore'] = array(
      'title' => t('Full bio, podcast clips and links<span class="visually-hidden"> for @title</span>', array(
        '@title' => $node_title_stripped,
      )),
      'url' => $entity->urlInfo(),
      'language' => $entity->language(),
      'attributes' => array(
        'rel' => 'tag',
        'title' => $node_title_stripped,
      ),
    );
  }
  else {

    if (!empty($links['node']['#links']['node-readmore'])) {
      unset ($links['node']['#links']['node-readmore']);
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function nerdcustom_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    \Drupal::service('nerdcustom.clipcreator')->createClips($entity);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nerdcustom_canonical_helper(&$variables, $node) {

  foreach ($node->uriRelationships() as $rel) {
    $url = $node->toUrl($rel);
    // Add link relationships if the user is authenticated or if the anonymous
    // user has access. Access checking must be done for anonymous users to
    // avoid traffic to inaccessible pages from web crawlers. For
    // authenticated users, showing the links in HTML head does not impact
    // user experience or security, since the routes are access checked when
    // visited and only visible via view source. This prevents doing
    // potentially expensive and hard to cache access checks on every request.
    // This means that the page will vary by user.permissions. We also rely on
    // the access checking fallback to ensure the correct cacheability
    // metadata if we have to check access.
    if ($variables['user']->isAuthenticated() || $url->access($variables['user'])) {
      // Set the node path as the canonical URL to prevent duplicate content.
      $variables['#attached']['html_head_link'][] = array(
        array(
          'rel' => $rel,
          'href' => $url->toString(),
        ),
        TRUE,
      );
    }

    if ($rel == 'canonical') {
      // Set the non-aliased canonical path as a default shortlink.
      $variables['#attached']['html_head_link'][] = array(
        array(
          'rel' => 'shortlink',
          'href' => $url->setOption('alias', TRUE)->toString(),
        ),
        TRUE,
      );
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nerdcustom_preprocess_panelizer_view_mode(&$variables) {
  if ($variables['view_mode'] === 'full' && !empty($variables['entity'])   && $variables['entity']  instanceof NodeInterface) {
    $node = $variables['entity'];
    nerdcustom_canonical_helper($variables, $node);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nerdcustom_preprocess_ds_entity_view(&$variables) {

  if ($variables['content']['#view_mode'] === 'full' && $variables['content']['#entity_type'] === 'node') {
    $node = $variables['content']['#' . $variables['content']['#entity_type']];
    nerdcustom_canonical_helper($variables, $node);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nerdcustom_preprocess_node(&$variables) {
  if ($variables['view_mode'] === 'full') {
    nerdcustom_canonical_helper($variables, $variables['node']);
  }
}

/**
 * Implements hook_theme().
 */
function nerdcustom_theme() {
  return array(
    'nerdcustom_mp3_player' => array(
      'variables' => array(
        'media_link' => NULL,
        'mimetype' => NULL,
        'description' => NULL,
        'attributes' => array(),
        'value' => NULL,
        'extravalue' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_views_data_alter().
 */
function nerdcustom_views_data_alter(array &$data) {
  $data['node_field_data']['referenced_storytellers'] = array(
    'title' => t('Referenced Storytellers'),
    'filter' => array(
      'title' => t('Referenced Storytellers'),
      'help' => t('Filter by storyteller'),
      'field' => 'nid',
      'id' => 'nerdcustom_referenced_storytellers',
    ),
  );

  $data['node_field_data']['referenced_podcast'] = array(
    'title' => t('Referenced Podcast'),
    'filter' => array(
      'title' => t('Referenced Podcast'),
      'help' => t('Filter by podcast'),
      'field' => 'nid',
      'id' => 'nerdcustom_referenced_podcast',
    ),
  );
}

/**
 * Implements hook_entity_field_access().
 */
function nerdcustom_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  // Deny viewing of the date field when there is also a
  // field_text_display_date value.
  // That is what field_text_display_date is for.
  if ($field_definition->getName() == 'field_dates' && !is_null($items) && $items->getEntity()->bundle() === 'event' && $operation == 'view') {
    $entity = $items->getEntity();
    if (!empty($entity->field_text_display_date->getValue()) && !AccessResult::allowedIfHasPermission($account, 'edit any event content')) {
      return AccessResult::forbidden();
    }
  }
  return AccessResult::neutral();
}
